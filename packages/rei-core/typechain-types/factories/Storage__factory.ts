/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Storage, StorageInterface } from "../Storage";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_to",
        type: "uint256",
      },
    ],
    name: "NumberChange",
    type: "event",
  },
  {
    inputs: [],
    name: "retrieve",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "num",
        type: "uint256",
      },
    ],
    name: "store",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061019e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632e64cec11461003b5780636057361d14610059575b600080fd5b610043610075565b60405161005091906100ef565b60405180910390f35b610073600480360381019061006e919061013b565b61007e565b005b60008054905090565b806000819055503373ffffffffffffffffffffffffffffffffffffffff167f37969ccf65ec87e2e83264f7e11c069687245e87d223c3c90bdf8b16d36fb991826040516100cb91906100ef565b60405180910390a250565b6000819050919050565b6100e9816100d6565b82525050565b600060208201905061010460008301846100e0565b92915050565b600080fd5b610118816100d6565b811461012357600080fd5b50565b6000813590506101358161010f565b92915050565b6000602082840312156101515761015061010a565b5b600061015f84828501610126565b9150509291505056fea26469706673582212205909a555fc56e47e93f7c375dc26fcc3b30e007cbe8a27df1532806bcc9ccce364736f6c63430008090033";

type StorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Storage__factory extends ContractFactory {
  constructor(...args: StorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Storage";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Storage> {
    return super.deploy(overrides || {}) as Promise<Storage>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Storage {
    return super.attach(address) as Storage;
  }
  connect(signer: Signer): Storage__factory {
    return super.connect(signer) as Storage__factory;
  }
  static readonly contractName: "Storage";
  public readonly contractName: "Storage";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StorageInterface {
    return new utils.Interface(_abi) as StorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Storage {
    return new Contract(address, _abi, signerOrProvider) as Storage;
  }
}
