/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Approver, ApproverInterface } from "../Approver";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "reiAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "_access",
        type: "string",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "_enabled",
        type: "bool",
      },
    ],
    name: "AssessSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "Applications",
    outputs: [
      {
        internalType: "uint256",
        name: "applicationNumber",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "applicant",
        type: "address",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "string",
        name: "imageURI",
        type: "string",
      },
      {
        components: [
          {
            internalType: "string",
            name: "country",
            type: "string",
          },
          {
            internalType: "string",
            name: "city",
            type: "string",
          },
          {
            internalType: "string",
            name: "gpsCoordinates",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "surfaceAreainMTRs",
            type: "uint256",
          },
        ],
        internalType: "struct Approver.REIAttributes",
        name: "attributes",
        type: "tuple",
      },
      {
        internalType: "enum Approver.ApplicationStatus",
        name: "applicationStatus",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "applicationNumber",
        type: "uint256",
      },
      {
        internalType: "enum Approver.ApplicationStatus",
        name: "status",
        type: "uint8",
      },
      {
        internalType: "string",
        name: "reiURI",
        type: "string",
      },
    ],
    name: "applicationDecision",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "string",
        name: "imageURI",
        type: "string",
      },
      {
        components: [
          {
            internalType: "string",
            name: "country",
            type: "string",
          },
          {
            internalType: "string",
            name: "city",
            type: "string",
          },
          {
            internalType: "string",
            name: "gpsCoordinates",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "surfaceAreainMTRs",
            type: "uint256",
          },
        ],
        internalType: "struct Approver.REIAttributes",
        name: "attributions",
        type: "tuple",
      },
    ],
    name: "applyForApproval",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "isApprover",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "numberOfApplications",
    outputs: [
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
      {
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
    ],
    name: "setApprover",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "approvers",
        type: "address[]",
      },
      {
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
    ],
    name: "setApprovers",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "reiaddress",
        type: "address",
      },
    ],
    name: "setREIAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620020f7380380620020f78339818101604052810190620000379190620001d5565b620000576200004b6200009f60201b60201c565b620000a760201b60201c565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000207565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200019d8262000170565b9050919050565b620001af8162000190565b8114620001bb57600080fd5b50565b600081519050620001cf81620001a4565b92915050565b600060208284031215620001ee57620001ed6200016b565b5b6000620001fe84828501620001be565b91505092915050565b611ee080620002176000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063a429f4f711610071578063a429f4f714610140578063c5e8987814610176578063d76fd2e714610192578063f02aeddc146101ae578063f2fde38b146101ca578063ff035d2c146101e6576100a9565b80633c3b04ad146100ae57806351b9dc6a146100cc5780636d218e48146100e8578063715018a6146101185780638da5cb5b14610122575b600080fd5b6100b6610202565b6040516100c39190611018565b60405180910390f35b6100e660048036038101906100e191906110e4565b61020e565b005b61010260048036038101906100fd91906111a2565b610274565b60405161010f91906111de565b60405180910390f35b6101206102ca565b005b61012a6102de565b6040516101379190611208565b60405180910390f35b61015a6004803603810190610155919061124f565b610307565b60405161016d9796959493929190611456565b60405180910390f35b610190600480360381019061018b91906116e7565b6106d8565b005b6101ac60048036038101906101a791906117be565b6108b4565b005b6101c860048036038101906101c39190611879565b6109c0565b005b6101e460048036038101906101df91906111a2565b610d1e565b005b61020060048036038101906101fb91906111a2565b610da2565b005b60028060000154905081565b610216610dee565b60005b8383905081101561026e576000848483818110610239576102386118ed565b5b905060200201602081019061024e91906111a2565b905061025a81846108b4565b5080806102669061194b565b915050610219565b50505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6102d2610dee565b6102dc6000610e6c565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60046020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806002018054610356906119c3565b80601f0160208091040260200160405190810160405280929190818152602001828054610382906119c3565b80156103cf5780601f106103a4576101008083540402835291602001916103cf565b820191906000526020600020905b8154815290600101906020018083116103b257829003601f168201915b5050505050908060030180546103e4906119c3565b80601f0160208091040260200160405190810160405280929190818152602001828054610410906119c3565b801561045d5780601f106104325761010080835404028352916020019161045d565b820191906000526020600020905b81548152906001019060200180831161044057829003601f168201915b505050505090806004018054610472906119c3565b80601f016020809104026020016040519081016040528092919081815260200182805461049e906119c3565b80156104eb5780601f106104c0576101008083540402835291602001916104eb565b820191906000526020600020905b8154815290600101906020018083116104ce57829003601f168201915b50505050509080600501604051806080016040529081600082018054610510906119c3565b80601f016020809104026020016040519081016040528092919081815260200182805461053c906119c3565b80156105895780601f1061055e57610100808354040283529160200191610589565b820191906000526020600020905b81548152906001019060200180831161056c57829003601f168201915b505050505081526020016001820180546105a2906119c3565b80601f01602080910402602001604051908101604052809291908181526020018280546105ce906119c3565b801561061b5780601f106105f05761010080835404028352916020019161061b565b820191906000526020600020905b8154815290600101906020018083116105fe57829003601f168201915b50505050508152602001600282018054610634906119c3565b80601f0160208091040260200160405190810160405280929190818152602001828054610660906119c3565b80156106ad5780601f10610682576101008083540402835291602001916106ad565b820191906000526020600020905b81548152906001019060200180831161069057829003601f168201915b50505050508152602001600382015481525050908060090160009054906101000a900460ff16905087565b6106e26002610f30565b60006106ee6002610f46565b90506040518060e00160405280828152602001610709610f54565b73ffffffffffffffffffffffffffffffffffffffff168152602001868152602001858152602001848152602001838152602001600060028111156107505761074f6113df565b5b815250600460008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020190805190602001906107d3929190610f5c565b5060608201518160030190805190602001906107f0929190610f5c565b50608082015181600401908051906020019061080d929190610f5c565b5060a0820151816005016000820151816000019080519060200190610833929190610f5c565b506020820151816001019080519060200190610850929190610f5c565b50604082015181600201908051906020019061086d929190610f5c565b5060608201518160030155505060c08201518160090160006101000a81548160ff021916908360028111156108a5576108a46113df565b5b02179055509050505050505050565b6108bc610dee565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561092c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092390611a41565b60405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f9382b383abae7e06bb2b7af46a1852212a2848cd4e4780e8bf49e9140533e9e982826040516109b4929190611aad565b60405180910390a15050565b600160006109cc610f54565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680610a585750610a226102de565b73ffffffffffffffffffffffffffffffffffffffff16610a40610f54565b73ffffffffffffffffffffffffffffffffffffffff16145b610a97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8e90611b5b565b60405180910390fd5b610aa16002610f46565b841115610ae3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ada90611bed565b60405180910390fd5b600060046000868152602001908152602001600020905060006002811115610b0e57610b0d6113df565b5b8160090160009054906101000a900460ff166002811115610b3257610b316113df565b5b14610b72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6990611c7f565b60405180910390fd5b60006002811115610b8657610b856113df565b5b846002811115610b9957610b986113df565b5b1415610bda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd190611ceb565b60405180910390fd5b836002811115610bed57610bec6113df565b5b8160090160009054906101000a900460ff166002811115610c1157610c106113df565b5b505060016002811115610c2757610c266113df565b5b846002811115610c3a57610c396113df565b5b1415610d1757600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0def5218260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685856040518463ffffffff1660e01b8152600401610cc393929190611d38565b602060405180830381600087803b158015610cdd57600080fd5b505af1158015610cf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d159190611d7f565b505b5050505050565b610d26610dee565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8d90611e1e565b60405180910390fd5b610d9f81610e6c565b50565b610daa610dee565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610df6610f54565b73ffffffffffffffffffffffffffffffffffffffff16610e146102de565b73ffffffffffffffffffffffffffffffffffffffff1614610e6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6190611e8a565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600033905090565b828054610f68906119c3565b90600052602060002090601f016020900481019282610f8a5760008555610fd1565b82601f10610fa357805160ff1916838001178555610fd1565b82800160010185558215610fd1579182015b82811115610fd0578251825591602001919060010190610fb5565b5b509050610fde9190610fe2565b5090565b5b80821115610ffb576000816000905550600101610fe3565b5090565b6000819050919050565b61101281610fff565b82525050565b600060208201905061102d6000830184611009565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261106c5761106b611047565b5b8235905067ffffffffffffffff8111156110895761108861104c565b5b6020830191508360208202830111156110a5576110a4611051565b5b9250929050565b60008115159050919050565b6110c1816110ac565b81146110cc57600080fd5b50565b6000813590506110de816110b8565b92915050565b6000806000604084860312156110fd576110fc61103d565b5b600084013567ffffffffffffffff81111561111b5761111a611042565b5b61112786828701611056565b9350935050602061113a868287016110cf565b9150509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061116f82611144565b9050919050565b61117f81611164565b811461118a57600080fd5b50565b60008135905061119c81611176565b92915050565b6000602082840312156111b8576111b761103d565b5b60006111c68482850161118d565b91505092915050565b6111d8816110ac565b82525050565b60006020820190506111f360008301846111cf565b92915050565b61120281611164565b82525050565b600060208201905061121d60008301846111f9565b92915050565b61122c81610fff565b811461123757600080fd5b50565b60008135905061124981611223565b92915050565b6000602082840312156112655761126461103d565b5b60006112738482850161123a565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156112b657808201518184015260208101905061129b565b838111156112c5576000848401525b50505050565b6000601f19601f8301169050919050565b60006112e78261127c565b6112f18185611287565b9350611301818560208601611298565b61130a816112cb565b840191505092915050565b600082825260208201905092915050565b60006113318261127c565b61133b8185611315565b935061134b818560208601611298565b611354816112cb565b840191505092915050565b61136881610fff565b82525050565b6000608083016000830151848203600086015261138b8282611326565b915050602083015184820360208601526113a58282611326565b915050604083015184820360408601526113bf8282611326565b91505060608301516113d4606086018261135f565b508091505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061141f5761141e6113df565b5b50565b60008190506114308261140e565b919050565b600061144082611422565b9050919050565b61145081611435565b82525050565b600060e08201905061146b600083018a611009565b61147860208301896111f9565b818103604083015261148a81886112dc565b9050818103606083015261149e81876112dc565b905081810360808301526114b281866112dc565b905081810360a08301526114c6818561136e565b90506114d560c0830184611447565b98975050505050505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61151e826112cb565b810181811067ffffffffffffffff8211171561153d5761153c6114e6565b5b80604052505050565b6000611550611033565b905061155c8282611515565b919050565b600067ffffffffffffffff82111561157c5761157b6114e6565b5b611585826112cb565b9050602081019050919050565b82818337600083830152505050565b60006115b46115af84611561565b611546565b9050828152602081018484840111156115d0576115cf6114e1565b5b6115db848285611592565b509392505050565b600082601f8301126115f8576115f7611047565b5b81356116088482602086016115a1565b91505092915050565b600080fd5b600080fd5b60006080828403121561163157611630611611565b5b61163b6080611546565b9050600082013567ffffffffffffffff81111561165b5761165a611616565b5b611667848285016115e3565b600083015250602082013567ffffffffffffffff81111561168b5761168a611616565b5b611697848285016115e3565b602083015250604082013567ffffffffffffffff8111156116bb576116ba611616565b5b6116c7848285016115e3565b60408301525060606116db8482850161123a565b60608301525092915050565b600080600080608085870312156117015761170061103d565b5b600085013567ffffffffffffffff81111561171f5761171e611042565b5b61172b878288016115e3565b945050602085013567ffffffffffffffff81111561174c5761174b611042565b5b611758878288016115e3565b935050604085013567ffffffffffffffff81111561177957611778611042565b5b611785878288016115e3565b925050606085013567ffffffffffffffff8111156117a6576117a5611042565b5b6117b28782880161161b565b91505092959194509250565b600080604083850312156117d5576117d461103d565b5b60006117e38582860161118d565b92505060206117f4858286016110cf565b9150509250929050565b6003811061180b57600080fd5b50565b60008135905061181d816117fe565b92915050565b60008083601f84011261183957611838611047565b5b8235905067ffffffffffffffff8111156118565761185561104c565b5b60208301915083600182028301111561187257611871611051565b5b9250929050565b600080600080606085870312156118935761189261103d565b5b60006118a18782880161123a565b94505060206118b28782880161180e565b935050604085013567ffffffffffffffff8111156118d3576118d2611042565b5b6118df87828801611823565b925092505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061195682610fff565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156119895761198861191c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806119db57607f821691505b602082108114156119ef576119ee611994565b5b50919050565b7f496e76616c696420417070726f76657220416464726573730000000000000000600082015250565b6000611a2b601883611287565b9150611a36826119f5565b602082019050919050565b60006020820190508181036000830152611a5a81611a1e565b9050919050565b7f415050524f564552000000000000000000000000000000000000000000000000600082015250565b6000611a97600883611287565b9150611aa282611a61565b602082019050919050565b6000606082019050611ac260008301856111f9565b8181036020830152611ad381611a8a565b9050611ae260408301846111cf565b9392505050565b7f416363657373436f6e74726f6c3a2063616c6c6572206973206e6f742061707060008201527f726f766572000000000000000000000000000000000000000000000000000000602082015250565b6000611b45602583611287565b9150611b5082611ae9565b604082019050919050565b60006020820190508181036000830152611b7481611b38565b9050919050565b7f4e6f206170706c69636174696f6e20776974682074686973206170706c69636160008201527f74696f6e206e756d626572000000000000000000000000000000000000000000602082015250565b6000611bd7602b83611287565b9150611be282611b7b565b604082019050919050565b60006020820190508181036000830152611c0681611bca565b9050919050565b7f6170706c69636174696f6e206973206e6f7420696e2070656e64696e6720737460008201527f6174650000000000000000000000000000000000000000000000000000000000602082015250565b6000611c69602383611287565b9150611c7482611c0d565b604082019050919050565b60006020820190508181036000830152611c9881611c5c565b9050919050565b7f4974277320616c726561647920696e2070656e64696e67207374617465000000600082015250565b6000611cd5601d83611287565b9150611ce082611c9f565b602082019050919050565b60006020820190508181036000830152611d0481611cc8565b9050919050565b6000611d178385611287565b9350611d24838584611592565b611d2d836112cb565b840190509392505050565b6000604082019050611d4d60008301866111f9565b8181036020830152611d60818486611d0b565b9050949350505050565b600081519050611d7981611223565b92915050565b600060208284031215611d9557611d9461103d565b5b6000611da384828501611d6a565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611e08602683611287565b9150611e1382611dac565b604082019050919050565b60006020820190508181036000830152611e3781611dfb565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611e74602083611287565b9150611e7f82611e3e565b602082019050919050565b60006020820190508181036000830152611ea381611e67565b905091905056fea2646970667358221220e997d321876a49c9bf76c0c75d3605b6ddb87c797a00d4cbbedea10152fea80064736f6c63430008090033";

type ApproverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ApproverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Approver__factory extends ContractFactory {
  constructor(...args: ApproverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Approver";
  }

  deploy(
    reiAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Approver> {
    return super.deploy(reiAddress, overrides || {}) as Promise<Approver>;
  }
  getDeployTransaction(
    reiAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(reiAddress, overrides || {});
  }
  attach(address: string): Approver {
    return super.attach(address) as Approver;
  }
  connect(signer: Signer): Approver__factory {
    return super.connect(signer) as Approver__factory;
  }
  static readonly contractName: "Approver";
  public readonly contractName: "Approver";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ApproverInterface {
    return new utils.Interface(_abi) as ApproverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Approver {
    return new Contract(address, _abi, signerOrProvider) as Approver;
  }
}
