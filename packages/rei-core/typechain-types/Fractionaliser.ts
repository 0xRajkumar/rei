/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface FractionaliserInterface extends utils.Interface {
  contractName: "Fractionaliser";
  functions: {
    "fractionalise(string,string,uint256,uint256)": FunctionFragment;
    "fractionaliseds(uint256)": FunctionFragment;
    "getAddressOfFractionisedId(uint256)": FunctionFragment;
    "marketplaceAddress()": FunctionFragment;
    "owner()": FunctionFragment;
    "reiAddress()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMarketplaceAddress(address)": FunctionFragment;
    "setReiAddress(address)": FunctionFragment;
    "totalFractionalised()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "fractionalise",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fractionaliseds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressOfFractionisedId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketplaceAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reiAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketplaceAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setReiAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalFractionalised",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "fractionalise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fractionaliseds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressOfFractionisedId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketplaceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reiAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketplaceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReiAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFractionalised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Fractionalised(uint256,address,address,uint256,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Fractionalised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type FractionalisedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, string],
  {
    fractionalisedId: BigNumber;
    fractionaliser: string;
    fractionalisedNftAddress: string;
    fractionQuantity: BigNumber;
    tokenId: BigNumber;
    NFTContractAddress: string;
  }
>;

export type FractionalisedEventFilter = TypedEventFilter<FractionalisedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Fractionaliser extends BaseContract {
  contractName: "Fractionaliser";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FractionaliserInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fractionalise(
      _name: string,
      _symbol: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fractionaliseds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAddressOfFractionisedId(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    marketplaceAddress(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    reiAddress(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarketplaceAddress(
      _marketplaceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReiAddress(
      _reiAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalFractionalised(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  fractionalise(
    _name: string,
    _symbol: string,
    _tokenId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fractionaliseds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getAddressOfFractionisedId(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  marketplaceAddress(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  reiAddress(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarketplaceAddress(
    _marketplaceAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReiAddress(
    _reiAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalFractionalised(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    fractionalise(
      _name: string,
      _symbol: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fractionaliseds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAddressOfFractionisedId(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    marketplaceAddress(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    reiAddress(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMarketplaceAddress(
      _marketplaceAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setReiAddress(
      _reiAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    totalFractionalised(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Fractionalised(uint256,address,address,uint256,uint256,address)"(
      fractionalisedId?: BigNumberish | null,
      fractionaliser?: string | null,
      fractionalisedNftAddress?: string | null,
      fractionQuantity?: null,
      tokenId?: null,
      NFTContractAddress?: null
    ): FractionalisedEventFilter;
    Fractionalised(
      fractionalisedId?: BigNumberish | null,
      fractionaliser?: string | null,
      fractionalisedNftAddress?: string | null,
      fractionQuantity?: null,
      tokenId?: null,
      NFTContractAddress?: null
    ): FractionalisedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    fractionalise(
      _name: string,
      _symbol: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fractionaliseds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAddressOfFractionisedId(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketplaceAddress(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    reiAddress(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarketplaceAddress(
      _marketplaceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReiAddress(
      _reiAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalFractionalised(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    fractionalise(
      _name: string,
      _symbol: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fractionaliseds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAddressOfFractionisedId(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketplaceAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reiAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarketplaceAddress(
      _marketplaceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReiAddress(
      _reiAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalFractionalised(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
