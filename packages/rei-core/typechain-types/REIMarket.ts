/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface REIMarketInterface extends utils.Interface {
  contractName: "REIMarket";
  functions: {
    "applyForLoan(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "getBackInvestmentWithInterest(uint256)": FunctionFragment;
    "invest(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "relaxationPeriodForlonee()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repay(uint256)": FunctionFragment;
    "setFractionaliserContract(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawBeforeFunded(uint256,uint256)": FunctionFragment;
    "withdrawLoan(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "applyForLoan",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBackInvestmentWithInterest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "invest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "relaxationPeriodForlonee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "repay", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "setFractionaliserContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBeforeFunded",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLoan",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "applyForLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBackInvestmentWithInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "relaxationPeriodForlonee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFractionaliserContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBeforeFunded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLoan",
    data: BytesLike
  ): Result;

  events: {
    "Applied(uint256,uint256,address,uint256,address,uint256,uint256,uint256,uint8)": EventFragment;
    "InterestPaid(uint256,uint256,uint256,address,uint256)": EventFragment;
    "Invested(uint256,uint256,uint256,uint256,uint8,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Repayed(uint256,uint8)": EventFragment;
    "WithDrawalLoan(uint256,uint8)": EventFragment;
    "WithdrawalBeforeFunded(uint256,uint256,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Applied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterestPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Invested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repayed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithDrawalLoan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalBeforeFunded"): EventFragment;
}

export type AppliedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    number
  ],
  {
    lendingNumber: BigNumber;
    fractionalisedId: BigNumber;
    fractionalisedNftAddress: string;
    numberOfFractions: BigNumber;
    Loanee: string;
    loanAmountPerFraction: BigNumber;
    interestPerFractionInPercentage: BigNumber;
    repayByTimeStamp: BigNumber;
    status: number;
  }
>;

export type AppliedEventFilter = TypedEventFilter<AppliedEvent>;

export type InterestPaidEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, BigNumber],
  {
    lendingNumber: BigNumber;
    numberOfInvesters: BigNumber;
    numberOfFractionsInvested: BigNumber;
    invester: string;
    amountInvestedByInvester: BigNumber;
  }
>;

export type InterestPaidEventFilter = TypedEventFilter<InterestPaidEvent>;

export type InvestedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, number, string, BigNumber],
  {
    lendingNumber: BigNumber;
    numberOfFractionsInvested: BigNumber;
    numberOfInvesters: BigNumber;
    startedAt: BigNumber;
    status: number;
    invester: string;
    amountInvestedByInvester: BigNumber;
  }
>;

export type InvestedEventFilter = TypedEventFilter<InvestedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RepayedEvent = TypedEvent<
  [BigNumber, number],
  { lendingNumber: BigNumber; status: number }
>;

export type RepayedEventFilter = TypedEventFilter<RepayedEvent>;

export type WithDrawalLoanEvent = TypedEvent<
  [BigNumber, number],
  { lendingNumber: BigNumber; status: number }
>;

export type WithDrawalLoanEventFilter = TypedEventFilter<WithDrawalLoanEvent>;

export type WithdrawalBeforeFundedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, BigNumber],
  {
    lendingNumber: BigNumber;
    numberOfFractionsInvested: BigNumber;
    numberOfInvesters: BigNumber;
    invester: string;
    amountInvestedByInvester: BigNumber;
  }
>;

export type WithdrawalBeforeFundedEventFilter =
  TypedEventFilter<WithdrawalBeforeFundedEvent>;

export interface REIMarket extends BaseContract {
  contractName: "REIMarket";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: REIMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    applyForLoan(
      _fractionalisedId: BigNumberish,
      _numberOfFractions: BigNumberish,
      _loanAmountPerFraction: BigNumberish,
      _interestPerFractionInPercentage: BigNumberish,
      repayByTimeStamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBackInvestmentWithInterest(
      lendingNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    invest(
      lendingNumber: BigNumberish,
      _numberOfFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    relaxationPeriodForlonee(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repay(
      lendingNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFractionaliserContract(
      fractionaliser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawBeforeFunded(
      lendingNumber: BigNumberish,
      _numberOfFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLoan(
      lendingNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  applyForLoan(
    _fractionalisedId: BigNumberish,
    _numberOfFractions: BigNumberish,
    _loanAmountPerFraction: BigNumberish,
    _interestPerFractionInPercentage: BigNumberish,
    repayByTimeStamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBackInvestmentWithInterest(
    lendingNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  invest(
    lendingNumber: BigNumberish,
    _numberOfFraction: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  relaxationPeriodForlonee(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repay(
    lendingNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFractionaliserContract(
    fractionaliser: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawBeforeFunded(
    lendingNumber: BigNumberish,
    _numberOfFraction: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLoan(
    lendingNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    applyForLoan(
      _fractionalisedId: BigNumberish,
      _numberOfFractions: BigNumberish,
      _loanAmountPerFraction: BigNumberish,
      _interestPerFractionInPercentage: BigNumberish,
      repayByTimeStamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBackInvestmentWithInterest(
      lendingNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    invest(
      lendingNumber: BigNumberish,
      _numberOfFraction: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    relaxationPeriodForlonee(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repay(
      lendingNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFractionaliserContract(
      fractionaliser: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawBeforeFunded(
      lendingNumber: BigNumberish,
      _numberOfFraction: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawLoan(
      lendingNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Applied(uint256,uint256,address,uint256,address,uint256,uint256,uint256,uint8)"(
      lendingNumber?: null,
      fractionalisedId?: null,
      fractionalisedNftAddress?: null,
      numberOfFractions?: null,
      Loanee?: null,
      loanAmountPerFraction?: null,
      interestPerFractionInPercentage?: null,
      repayByTimeStamp?: null,
      status?: null
    ): AppliedEventFilter;
    Applied(
      lendingNumber?: null,
      fractionalisedId?: null,
      fractionalisedNftAddress?: null,
      numberOfFractions?: null,
      Loanee?: null,
      loanAmountPerFraction?: null,
      interestPerFractionInPercentage?: null,
      repayByTimeStamp?: null,
      status?: null
    ): AppliedEventFilter;

    "InterestPaid(uint256,uint256,uint256,address,uint256)"(
      lendingNumber?: null,
      numberOfInvesters?: null,
      numberOfFractionsInvested?: null,
      invester?: null,
      amountInvestedByInvester?: null
    ): InterestPaidEventFilter;
    InterestPaid(
      lendingNumber?: null,
      numberOfInvesters?: null,
      numberOfFractionsInvested?: null,
      invester?: null,
      amountInvestedByInvester?: null
    ): InterestPaidEventFilter;

    "Invested(uint256,uint256,uint256,uint256,uint8,address,uint256)"(
      lendingNumber?: null,
      numberOfFractionsInvested?: null,
      numberOfInvesters?: null,
      startedAt?: null,
      status?: null,
      invester?: null,
      amountInvestedByInvester?: null
    ): InvestedEventFilter;
    Invested(
      lendingNumber?: null,
      numberOfFractionsInvested?: null,
      numberOfInvesters?: null,
      startedAt?: null,
      status?: null,
      invester?: null,
      amountInvestedByInvester?: null
    ): InvestedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Repayed(uint256,uint8)"(
      lendingNumber?: null,
      status?: null
    ): RepayedEventFilter;
    Repayed(lendingNumber?: null, status?: null): RepayedEventFilter;

    "WithDrawalLoan(uint256,uint8)"(
      lendingNumber?: null,
      status?: null
    ): WithDrawalLoanEventFilter;
    WithDrawalLoan(
      lendingNumber?: null,
      status?: null
    ): WithDrawalLoanEventFilter;

    "WithdrawalBeforeFunded(uint256,uint256,uint256,address,uint256)"(
      lendingNumber?: null,
      numberOfFractionsInvested?: null,
      numberOfInvesters?: null,
      invester?: null,
      amountInvestedByInvester?: null
    ): WithdrawalBeforeFundedEventFilter;
    WithdrawalBeforeFunded(
      lendingNumber?: null,
      numberOfFractionsInvested?: null,
      numberOfInvesters?: null,
      invester?: null,
      amountInvestedByInvester?: null
    ): WithdrawalBeforeFundedEventFilter;
  };

  estimateGas: {
    applyForLoan(
      _fractionalisedId: BigNumberish,
      _numberOfFractions: BigNumberish,
      _loanAmountPerFraction: BigNumberish,
      _interestPerFractionInPercentage: BigNumberish,
      repayByTimeStamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBackInvestmentWithInterest(
      lendingNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    invest(
      lendingNumber: BigNumberish,
      _numberOfFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    relaxationPeriodForlonee(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repay(
      lendingNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFractionaliserContract(
      fractionaliser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawBeforeFunded(
      lendingNumber: BigNumberish,
      _numberOfFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLoan(
      lendingNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    applyForLoan(
      _fractionalisedId: BigNumberish,
      _numberOfFractions: BigNumberish,
      _loanAmountPerFraction: BigNumberish,
      _interestPerFractionInPercentage: BigNumberish,
      repayByTimeStamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBackInvestmentWithInterest(
      lendingNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    invest(
      lendingNumber: BigNumberish,
      _numberOfFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relaxationPeriodForlonee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      lendingNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFractionaliserContract(
      fractionaliser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBeforeFunded(
      lendingNumber: BigNumberish,
      _numberOfFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLoan(
      lendingNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
