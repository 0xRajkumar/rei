// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Application extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Application entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Application must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Application", id.toString(), this);
    }
  }

  static load(id: string): Application | null {
    return changetype<Application | null>(store.get("Application", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get applicationNumber(): BigInt {
    let value = this.get("applicationNumber");
    return value!.toBigInt();
  }

  set applicationNumber(value: BigInt) {
    this.set("applicationNumber", Value.fromBigInt(value));
  }

  get applicant(): string {
    let value = this.get("applicant");
    return value!.toString();
  }

  set applicant(value: string) {
    this.set("applicant", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get imageURI(): string {
    let value = this.get("imageURI");
    return value!.toString();
  }

  set imageURI(value: string) {
    this.set("imageURI", Value.fromString(value));
  }

  get country(): string {
    let value = this.get("country");
    return value!.toString();
  }

  set country(value: string) {
    this.set("country", Value.fromString(value));
  }

  get city(): string {
    let value = this.get("city");
    return value!.toString();
  }

  set city(value: string) {
    this.set("city", Value.fromString(value));
  }

  get gpsCoordinates(): string {
    let value = this.get("gpsCoordinates");
    return value!.toString();
  }

  set gpsCoordinates(value: string) {
    this.set("gpsCoordinates", Value.fromString(value));
  }

  get surfaceAreaInMTRs(): BigInt {
    let value = this.get("surfaceAreaInMTRs");
    return value!.toBigInt();
  }

  set surfaceAreaInMTRs(value: BigInt) {
    this.set("surfaceAreaInMTRs", Value.fromBigInt(value));
  }

  get applicationStatus(): string {
    let value = this.get("applicationStatus");
    return value!.toString();
  }

  set applicationStatus(value: string) {
    this.set("applicationStatus", Value.fromString(value));
  }
}

export class WithStatus extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WithStatus entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WithStatus must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WithStatus", id.toString(), this);
    }
  }

  static load(id: string): WithStatus | null {
    return changetype<WithStatus | null>(store.get("WithStatus", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get applications(): Array<string> {
    let value = this.get("applications");
    return value!.toStringArray();
  }

  set applications(value: Array<string>) {
    this.set("applications", Value.fromStringArray(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get applications(): Array<string> {
    let value = this.get("applications");
    return value!.toStringArray();
  }

  set applications(value: Array<string>) {
    this.set("applications", Value.fromStringArray(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenID(): BigInt {
    let value = this.get("tokenID");
    return value!.toBigInt();
  }

  set tokenID(value: BigInt) {
    this.set("tokenID", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get tokenURI(): string {
    let value = this.get("tokenURI");
    return value!.toString();
  }

  set tokenURI(value: string) {
    this.set("tokenURI", Value.fromString(value));
  }
}

export class TokenUser extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenUser entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenUser must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TokenUser", id.toString(), this);
    }
  }

  static load(id: string): TokenUser | null {
    return changetype<TokenUser | null>(store.get("TokenUser", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }
}

export class Fractionalised extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Fractionalised entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Fractionalised must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Fractionalised", id.toString(), this);
    }
  }

  static load(id: string): Fractionalised | null {
    return changetype<Fractionalised | null>(store.get("Fractionalised", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fractionalisedId(): BigInt {
    let value = this.get("fractionalisedId");
    return value!.toBigInt();
  }

  set fractionalisedId(value: BigInt) {
    this.set("fractionalisedId", Value.fromBigInt(value));
  }

  get fractionaliser(): string {
    let value = this.get("fractionaliser");
    return value!.toString();
  }

  set fractionaliser(value: string) {
    this.set("fractionaliser", Value.fromString(value));
  }

  get fractionalisedNftAddress(): Bytes {
    let value = this.get("fractionalisedNftAddress");
    return value!.toBytes();
  }

  set fractionalisedNftAddress(value: Bytes) {
    this.set("fractionalisedNftAddress", Value.fromBytes(value));
  }

  get fractionQuantity(): BigInt {
    let value = this.get("fractionQuantity");
    return value!.toBigInt();
  }

  set fractionQuantity(value: BigInt) {
    this.set("fractionQuantity", Value.fromBigInt(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get tokenURI(): string {
    let value = this.get("tokenURI");
    return value!.toString();
  }

  set tokenURI(value: string) {
    this.set("tokenURI", Value.fromString(value));
  }

  get NFTContractAddress(): Bytes {
    let value = this.get("NFTContractAddress");
    return value!.toBytes();
  }

  set NFTContractAddress(value: Bytes) {
    this.set("NFTContractAddress", Value.fromBytes(value));
  }
}

export class UserFractionalised extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserFractionalised entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserFractionalised must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserFractionalised", id.toString(), this);
    }
  }

  static load(id: string): UserFractionalised | null {
    return changetype<UserFractionalised | null>(
      store.get("UserFractionalised", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fractionaliseds(): Array<string> {
    let value = this.get("fractionaliseds");
    return value!.toStringArray();
  }

  set fractionaliseds(value: Array<string>) {
    this.set("fractionaliseds", Value.fromStringArray(value));
  }
}

export class LendedForLoan extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LendedForLoan entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LendedForLoan must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LendedForLoan", id.toString(), this);
    }
  }

  static load(id: string): LendedForLoan | null {
    return changetype<LendedForLoan | null>(store.get("LendedForLoan", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lendingNumber(): BigInt {
    let value = this.get("lendingNumber");
    return value!.toBigInt();
  }

  set lendingNumber(value: BigInt) {
    this.set("lendingNumber", Value.fromBigInt(value));
  }

  get fractionalisedId(): BigInt {
    let value = this.get("fractionalisedId");
    return value!.toBigInt();
  }

  set fractionalisedId(value: BigInt) {
    this.set("fractionalisedId", Value.fromBigInt(value));
  }

  get fractionalisedNftAddress(): Bytes {
    let value = this.get("fractionalisedNftAddress");
    return value!.toBytes();
  }

  set fractionalisedNftAddress(value: Bytes) {
    this.set("fractionalisedNftAddress", Value.fromBytes(value));
  }

  get numberOfFractions(): BigInt {
    let value = this.get("numberOfFractions");
    return value!.toBigInt();
  }

  set numberOfFractions(value: BigInt) {
    this.set("numberOfFractions", Value.fromBigInt(value));
  }

  get numberOfFractionsInvested(): BigInt {
    let value = this.get("numberOfFractionsInvested");
    return value!.toBigInt();
  }

  set numberOfFractionsInvested(value: BigInt) {
    this.set("numberOfFractionsInvested", Value.fromBigInt(value));
  }

  get Loanee(): Bytes {
    let value = this.get("Loanee");
    return value!.toBytes();
  }

  set Loanee(value: Bytes) {
    this.set("Loanee", Value.fromBytes(value));
  }

  get numberOfInvesters(): BigInt {
    let value = this.get("numberOfInvesters");
    return value!.toBigInt();
  }

  set numberOfInvesters(value: BigInt) {
    this.set("numberOfInvesters", Value.fromBigInt(value));
  }

  get loanAmountPerFraction(): BigInt {
    let value = this.get("loanAmountPerFraction");
    return value!.toBigInt();
  }

  set loanAmountPerFraction(value: BigInt) {
    this.set("loanAmountPerFraction", Value.fromBigInt(value));
  }

  get interestPerFractionInPercentage(): BigInt {
    let value = this.get("interestPerFractionInPercentage");
    return value!.toBigInt();
  }

  set interestPerFractionInPercentage(value: BigInt) {
    this.set("interestPerFractionInPercentage", Value.fromBigInt(value));
  }

  get repayByTimeStamp(): BigInt {
    let value = this.get("repayByTimeStamp");
    return value!.toBigInt();
  }

  set repayByTimeStamp(value: BigInt) {
    this.set("repayByTimeStamp", Value.fromBigInt(value));
  }

  get startedAt(): BigInt {
    let value = this.get("startedAt");
    return value!.toBigInt();
  }

  set startedAt(value: BigInt) {
    this.set("startedAt", Value.fromBigInt(value));
  }

  get status(): i32 {
    let value = this.get("status");
    return value!.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }

  get investers(): Array<string> {
    let value = this.get("investers");
    return value!.toStringArray();
  }

  set investers(value: Array<string>) {
    this.set("investers", Value.fromStringArray(value));
  }
}

export class Invester extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Invester entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Invester must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Invester", id.toString(), this);
    }
  }

  static load(id: string): Invester | null {
    return changetype<Invester | null>(store.get("Invester", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get invester(): string {
    let value = this.get("invester");
    return value!.toString();
  }

  set invester(value: string) {
    this.set("invester", Value.fromString(value));
  }

  get lendedforlaons(): Array<string> {
    let value = this.get("lendedforlaons");
    return value!.toStringArray();
  }

  set lendedforlaons(value: Array<string>) {
    this.set("lendedforlaons", Value.fromStringArray(value));
  }
}

export class InvesterLendedForLoan extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save InvesterLendedForLoan entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type InvesterLendedForLoan must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("InvesterLendedForLoan", id.toString(), this);
    }
  }

  static load(id: string): InvesterLendedForLoan | null {
    return changetype<InvesterLendedForLoan | null>(
      store.get("InvesterLendedForLoan", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get invester(): string {
    let value = this.get("invester");
    return value!.toString();
  }

  set invester(value: string) {
    this.set("invester", Value.fromString(value));
  }

  get lendedforloan(): string {
    let value = this.get("lendedforloan");
    return value!.toString();
  }

  set lendedforloan(value: string) {
    this.set("lendedforloan", Value.fromString(value));
  }
}

export class ApproverAccess extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ApproverAccess entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ApproverAccess must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ApproverAccess", id.toString(), this);
    }
  }

  static load(id: string): ApproverAccess | null {
    return changetype<ApproverAccess | null>(store.get("ApproverAccess", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get bool(): boolean {
    let value = this.get("bool");
    return value!.toBoolean();
  }

  set bool(value: boolean) {
    this.set("bool", Value.fromBoolean(value));
  }
}
