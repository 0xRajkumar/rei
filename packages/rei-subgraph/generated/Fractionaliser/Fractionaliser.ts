// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Fractionalised extends ethereum.Event {
  get params(): Fractionalised__Params {
    return new Fractionalised__Params(this);
  }
}

export class Fractionalised__Params {
  _event: Fractionalised;

  constructor(event: Fractionalised) {
    this._event = event;
  }

  get fractionalisedId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get fractionaliser(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get fractionalisedNftAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get fractionQuantity(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get NFTContractAddress(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class FractionaliserOwnershipTransferred extends ethereum.Event {
  get params(): FractionaliserOwnershipTransferred__Params {
    return new FractionaliserOwnershipTransferred__Params(this);
  }
}

export class FractionaliserOwnershipTransferred__Params {
  _event: FractionaliserOwnershipTransferred;

  constructor(event: FractionaliserOwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Fractionaliser extends ethereum.SmartContract {
  static bind(address: Address): Fractionaliser {
    return new Fractionaliser("Fractionaliser", address);
  }

  fractionalise(
    _name: string,
    _symbol: string,
    _tokenId: BigInt,
    _amount: BigInt
  ): BigInt {
    let result = super.call(
      "fractionalise",
      "fractionalise(string,string,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_fractionalise(
    _name: string,
    _symbol: string,
    _tokenId: BigInt,
    _amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fractionalise",
      "fractionalise(string,string,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fractionaliseds(param0: BigInt): Address {
    let result = super.call(
      "fractionaliseds",
      "fractionaliseds(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_fractionaliseds(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "fractionaliseds",
      "fractionaliseds(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAddressOfFractionisedId(id: BigInt): Address {
    let result = super.call(
      "getAddressOfFractionisedId",
      "getAddressOfFractionisedId(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toAddress();
  }

  try_getAddressOfFractionisedId(id: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAddressOfFractionisedId",
      "getAddressOfFractionisedId(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  marketplaceAddress(): Address {
    let result = super.call(
      "marketplaceAddress",
      "marketplaceAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_marketplaceAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "marketplaceAddress",
      "marketplaceAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reiAddress(): Address {
    let result = super.call("reiAddress", "reiAddress():(address)", []);

    return result[0].toAddress();
  }

  try_reiAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("reiAddress", "reiAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalFractionalised(): BigInt {
    let result = super.call(
      "totalFractionalised",
      "totalFractionalised():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalFractionalised(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalFractionalised",
      "totalFractionalised():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _marketplaceAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _reiAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class FractionaliseCall extends ethereum.Call {
  get inputs(): FractionaliseCall__Inputs {
    return new FractionaliseCall__Inputs(this);
  }

  get outputs(): FractionaliseCall__Outputs {
    return new FractionaliseCall__Outputs(this);
  }
}

export class FractionaliseCall__Inputs {
  _call: FractionaliseCall;

  constructor(call: FractionaliseCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class FractionaliseCall__Outputs {
  _call: FractionaliseCall;

  constructor(call: FractionaliseCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetMarketplaceAddressCall extends ethereum.Call {
  get inputs(): SetMarketplaceAddressCall__Inputs {
    return new SetMarketplaceAddressCall__Inputs(this);
  }

  get outputs(): SetMarketplaceAddressCall__Outputs {
    return new SetMarketplaceAddressCall__Outputs(this);
  }
}

export class SetMarketplaceAddressCall__Inputs {
  _call: SetMarketplaceAddressCall;

  constructor(call: SetMarketplaceAddressCall) {
    this._call = call;
  }

  get _marketplaceAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMarketplaceAddressCall__Outputs {
  _call: SetMarketplaceAddressCall;

  constructor(call: SetMarketplaceAddressCall) {
    this._call = call;
  }
}

export class SetReiAddressCall extends ethereum.Call {
  get inputs(): SetReiAddressCall__Inputs {
    return new SetReiAddressCall__Inputs(this);
  }

  get outputs(): SetReiAddressCall__Outputs {
    return new SetReiAddressCall__Outputs(this);
  }
}

export class SetReiAddressCall__Inputs {
  _call: SetReiAddressCall;

  constructor(call: SetReiAddressCall) {
    this._call = call;
  }

  get _reiAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetReiAddressCall__Outputs {
  _call: SetReiAddressCall;

  constructor(call: SetReiAddressCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
